# Arista specific settings

if [[ -x /usr/bin/amergeVim ]]; then
   export P4MERGE=amergeVim
fi

export ETBA_IMMORTALIZE=1

# Just for debugging Gitarband
export REPO_TRACE=1

# For boostrapping Barney -- proabably can be removed later
PREFIX=$HOME/wksp    # you can set this to something else if you like
export GOPATH=$PREFIX PATH=$PREFIX/bin:$PATH B5PATH=$PREFIX/src
PREFIX=

function a4make() {
   if [[ $# == 1 ]]; then
      a4 make -p $1
   else
      for pkg in "$@"
      do
         (
         echo "Running 'a4 make -p $pkg &> /tmp/$pkg.out' in the background..."
         a4 make -p $pkg &> /tmp/$pkg.out
         echo "a4 make -p $pkg returns $?..."
         ) &
      done
      wait
      return 0
   fi
}

function a4check() {
   for pkg in "$@"
   do
      (
      echo "Running 'a4 make -p $pkg check &> /tmp/$pkg-check.out' in the background..."
      a4 make -p $pkg check &> /tmp/$pkg-check.out
      echo "a4 make -p $pkg check returns $?..."
      ) &
   done
   wait
   return 0
}

function a4pylint() {
   for pkg in "$@"
   do
      (
      echo "Running 'a4 make -p $pkg pylint &> /tmp/$pkg-pylint.out' in the background..."
      a4 make -p $pkg pylint &> /tmp/$pkg-pylint.out
      echo "a4 make -p $pkg pylint returns $?..."
      ) &
   done
   wait
   return 0
}

shell() {
   a4c shell -t "$1" "tmux -u attach || tmux -u"
}

findus() {
    arventory list | grep ^us | xargs -n1 -P$(nproc) -I% sh -c \
       'arventory email % | awk "/'"\<$1\>"'/ { print \"%\"; }"'
}

failed_tests() {
   cat summary.txt | grep FAIL | awk '{print "Bgp/stest/"$2".py"}'
}

buildstatus() {
   local wp="${1:-$WP}"
   watch -n 600 "ap parallelbuild status -w $wp -g | grep running"
}

buildskipped() {
   local wp="${1:-$WP}"
   watch -n 600 "ap parallelbuild skipped | grep $wp"
}

tacscp() {
   scp -4 -r joshpfosi@tac-sftp.aristanetworks.com:/opt/escalations/"$1" .
}

buildtopics() {
   a git topics --project-names | xargs -t -P 16 -n 1 Abuildd -f
   a git topics --project-names | xargs -t -P 16 -n 1 -I {} Abuildd -f {}/x86_64_el7
}

ttree() {
   a git topics --tree
}

startbug() {
   if [ -z "$1" ]
   then
      return 1
   fi
   mkdir -p /home/joshpfosi/notes/$1
   cd /home/joshpfosi/notes/$1
   touch notes
   if [ -z "$2" ]
   then
      wget $(ap job --hitBug $1 -m 1 -u | grep "main log" | cut -d":" -f2-)
   else
      wget $2
   fi
}

qt() {
   if [ $# -ne 2 ]
   then
      echo "Usage: qt URL BUG"
      return 1
   fi
   cd /home/joshpfosi/notes/$2
   dut=$(echo $1 | sed 's/.*quicktrace-\(.*\).tar.gz/\1/g')
   mkdir -p qt-$dut
   cd qt-$dut
   wget $1
   tar -xvf ./*
}

status() {
   if [ -d /src/.repo ]; then
      watch -n 600 "a4 mut status -m $MUT"
   else
      watch -n 600 'a4 mut status'
   fi
}

copyall() {
   if [ -z "$1" ]
   then
      return 1
   fi
   REPO_TRACE=0 repo forall -c 'echo $REPO_PROJECT' | xargs -n 1 -t -I {} bash -c \
   "cd /src/{} && git remote add was ssh://$1/src/.repo/projects/{}.git && git fetch was"
}
# Useful for comparing the heads of remote branches to local counterparts
# git branch | grep -v revert | grep -v "\*" | xargs -n 1 -t -I {} bash -c 'export BRANCH={} && diff <(git diff was/$BRANCH^..was/$BRANCH) <(git diff $BRANCH^..$BRANCH)'

# Search containers
findContainers() {
   if [ -z "$1" ]
   then
      return 1
   fi
   a4c containers | awk '/joshpfosi/ {print $2}' | xargs -n 1 -I {} -P 8 -t \
   find /var/docker/volumes/$USER.{}/_data/tmp-$USER.{} -name $1 2> /dev/null
}


alias a4diff="a4 diff | vi -R -"
alias ribcore="sudo gdb /usr/bin/Rib -c /var/core/*Rib*"
alias atest='AutoTest --notify=$USER --skipTestbedCheck -a --logDir=/tmp --testListFile=/tmp/test-list --algorithm=fixed -t 99999 -d '
alias runstests="runstests --isolate -j 8"
alias gii="telnet localhost 616"
alias cli="Art ndut cli --poll --shell"
alias grab="Art grab -f -d 96 --comment testing "
alias sum="paste -sd+ - | bc"
alias pb='curl -F c=@- pb'
alias lastcore='sudo arstack /var/core/$(ls -rt /var/core | tail -1) | c++filt | less'
alias supersede-all='a4 mut status -l -c 99 | awk "/joshpfosi/ {print $2}" | xargs -P 8 -n 1 a mts supersede-all-rejected -p'
alias stash='repo forall -c "git stash"'
alias unstash='repo forall -c "git stash pop"'
alias agitlog='a git topics -l --name-only | xargs -n 1 a git topic show -t'
alias supersede-ids="cut -f1 -d' ' | xargs -n 1 -t -P 8 a mts supersede -i "

# TODO Remove after a few weeks: # Use locally install Vim 8 when chroot'd
# TODO Remove after a few weeks: ARCH=`uname -m`
# TODO Remove after a few weeks: export PATH="$HOME/$ARCH/bin:$PATH"
