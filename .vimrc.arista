" This file is used to configure Vim on my user server at Arista

" TODO: Remove after a few weeks Plugin 'Valloric/YouCompleteMe'
Plugin 'https://gitlab.aristanetworks.com/ssarpal/vim-autotest-quicktrace'
let g:autotest_quicktrace_tmp = '/tmp'

" CtrlP only in specific projects
" let g:ctrlp_user_command='find /src/RouteMap /src/Bgp /src/gated -type f && true %s'

" Add support for TACC files to a.vim
silent! let g:alternateExtensionsDict['tac'] = "tin,itin"
silent! let g:alternateExtensionsDict['tin'] = "tac"
silent! let g:alternateExtensionsDict['itin'] = "tac"

" limits width for c and c++ files
au FileType py,h,c,cpp highlight Overlength ctermbg=red ctermfg=white guibg=#592929
au Filetype py,h,c,cpp,js match Overlength /\%85v.\+/
set textwidth=85
set colorcolumn=86

au BufRead,BufNewFile *.qbi set filetype=python

" The gated package has different tab conventions.
autocmd BufRead,BufNewFile */gated-ctk/* set noexpandtab

function! s:getCurrentPackage()
   "gets full path of current filename. and extracts second path element
   "example : /src/gated/asdfsdf/asdfd -> gated
  let l:pathlist = split(expand('%:p'),'/')
  if len(l:pathlist) < 1
     echo 'empty pathlist'
     return -1
  endif
  if l:pathlist[0] != 'src'
     echo 'not an src directory. not running a4 make'
     return -1
  endif
  if len(l:pathlist) < 2
     echo 'could not detect package. not running a4 make'
     return -1
  endif
  return l:pathlist[1]
endfunction

function! s:makePackage(...)
  if empty(a:000)
     let l:package = s:getCurrentPackage()
     if l:package == -1
        return
     endif
     let l:packages = [ l:package ]
  else
     let l:packages = a:000
  endif
  echo l:packages
  for package in l:packages
     "let l:cmd = ':Dispatch a4 make -p '.package
     let l:makecmd='a4\ make\ -p\ '.package
     execute 'set makeprg='.l:makecmd
     execute 'Make'
  endfor
endfunction

command! -nargs=* MakePackage call s:makePackage(<f-args>)
nnoremap <leader>am :MakePackage<CR>
set makeprg=a4\ make\ -p

" a4 make settings
" below error format is copied from /usr/share/vim/vim74/compiler/gcc
" modified with [.*] to match the [<package>] output from a4 make
set errorformat=
      \\[%.%#\]\ %*[^\"]\"%f\"%*\\D%l:%c:\ %m,
      \\[%.%#\]\ %*[^\"]\"%f\"%*\\D%l:\ %m,
      \\[%.%#\]\ \"%f\"%*\\D%l:%c:\ %m,
      \\[%.%#\]\ \"%f\"%*\\D%l:\ %m,
      \%-G\[%.%#\]\ %f:%l:\ %trror:\ (Each\ undeclared\ identifier\ is\ reported\ only\ once,
      \%-G\[%.%#\]\ %f:%l:\ %trror:\ for\ each\ function\ it\ appears\ in.),
      \[%.%#\]\ \%f:%l:%c:\ %trror:\ %m,
      \[%.%#\]\ \%f:%l:%c:\ %tarning:\ %m,
      \[%.%#\]\ \%f:%l:%c:\ %m,
      \[%.%#\]\ \%f:%l:\ %trror:\ %m,
      \[%.%#\]\ \%f:%l:\ %tarning:\ %m,
      \[%.%#\]\ \%f:%l:\ %m,
      \\[%.%#\]\ \"%f\"\\,\ line\ %l%*\\D%c%*[^\ ]\ %m,

function! OpenGrokFile()
   let l:oper = 'split ' " 'tabe '
   let l:line = getline( '.' )
   " file from opengrok output
   if (l:line =~ '^\s\+\d\+\s\+/eos-trunk/src/\S\+:$')
      let l:fields = matchlist( l:line, '\(/src/[^:]\+\)' )
      if filereadable(l:fields[0])
         execute l:oper . fnameescape(l:fields[0])
      endif
   else
      " generic filename from the beginning of the line. must have "." in it
      let l:fields = matchlist( l:line, '\([\.a-zA-Z\/_0-9]\+\.[a-zA-Z0-9_]\+\)' )
      execute l:oper . fnameescape(l:fields[0])
   endif
endfunction

nmap <F2> :call OpenGrokFile()<CR>

function! WordUnderCursorOrDefault(cmd, ...)
  	let Fn = function(a:cmd)

  	if empty(a:0)
    	call Fn(expand('<cword>'))
  	else
    	call Fn(join(a:000))
  	endif
endfunction

function! Bug(bugId)
	execute "new | read !a4 bugs -A --all-comments --comment-length 200000 --logre " . a:bugId
   " Navigate to top of the buffer
   execute "0"
endfunction

command! -nargs=* Bug call WordUnderCursorOrDefault('Bug', <f-args>)
nnoremap <Leader>b :Bug<CR>
command! -nargs=1 OGrok :tabe | :read !a grok -m 0 "<args>"
